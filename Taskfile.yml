version: "3"

vars:
  MODEL: '{{.MODEL | default "ggml-tiny.en-q5_1.bin"}}'
  MODEL_URL: "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/{{.MODEL}}"
  WHISPER_CPP_DIR: third_party/whisper.cpp
  WHISPER_BUILD_DIR: "{{.WHISPER_CPP_DIR}}/build"
  EASYP_BIN: '{{.EASYP_BIN | default "./bin/easyp"}}'
  CUDA_ARCHS: '{{.CUDA_ARCHS | default "80"}}'

tasks:
  default:
    desc: "Build and run the server (with Metal if on macOS)"
    cmds:
      - task: run:metal

  # ------------------------------------------------------------------
  # Dependency Management & C++ Build
  # ------------------------------------------------------------------

  vendor-cpp:
    desc: Clone the whisper.cpp repository into the third_party directory
    cmds:
      - |
        # Use a lock directory to prevent race conditions from parallel task execution
        if mkdir {{.WHISPER_CPP_DIR}}.lock 2>/dev/null; then
          # If we acquired the lock, ensure we release it on exit
          trap 'rmdir {{.WHISPER_CPP_DIR}}.lock' EXIT
          
          # Check if cloning is needed
          if [ ! -d "{{.WHISPER_CPP_DIR}}/.git" ]; then
            echo "INFO: Cloning whisper.cpp repository into third_party..."
            rm -rf {{.WHISPER_CPP_DIR}}
            git clone --depth 1 https://github.com/ggerganov/whisper.cpp.git {{.WHISPER_CPP_DIR}}
          fi
        else
          # If we failed to get the lock, wait for the other process to finish
          echo "INFO: Waiting for another process to clone whisper.cpp..."
          while [ -d "{{.WHISPER_CPP_DIR}}.lock" ]; do sleep 1; done
        fi
    status:
      - test -d {{.WHISPER_CPP_DIR}}/.git

  whisper-lib:
    desc: Build the core C++ whisper.cpp library
    deps: [vendor-cpp]
    cmds:
      - cmake -S {{.WHISPER_CPP_DIR}} -B {{.WHISPER_BUILD_DIR}} -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_BUILD_EXAMPLES=OFF -DWHISPER_BUILD_TESTS=OFF
      - cmake --build {{.WHISPER_BUILD_DIR}} --target whisper

  whisper-lib:metal:
    desc: Build the core C++ whisper.cpp library with Metal support for macOS
    deps: [vendor-cpp]
    cmds:
      - cmake -S {{.WHISPER_CPP_DIR}} -B {{.WHISPER_BUILD_DIR}} -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_BUILD_EXAMPLES=OFF -DWHISPER_BUILD_TESTS=OFF -DGGML_METAL=ON
      - cmake --build {{.WHISPER_BUILD_DIR}} --target whisper

  whisper-lib:cuda:
    desc: Build the core C++ whisper.cpp library with CUDA (Ubuntu)
    deps: [vendor-cpp]
    cmds:
      - |
        set -e
        if ! command -v nvcc >/dev/null 2>&1; then
          echo "ERROR: nvcc not found. Install CUDA toolkit before building (e.g. nvidia-cuda-toolkit or NVIDIA CUDA repo)." >&2
          exit 1
        fi
        # Clean build dir to avoid stale host-compiler flags
        # rm -rf {{.WHISPER_BUILD_DIR}}
        # Prefer GCC-12 for nvcc host compiler to avoid GCC ABI issues
        export CC="$(command -v gcc-12 || command -v gcc)"
        export CXX="$(command -v g++-12 || command -v g++)"
        # Limit build parallelism to avoid OOM during CUDA compilation (override with JOBS=N)
        JOBS="${JOBS:-1}"
        cmake -S {{.WHISPER_CPP_DIR}} -B {{.WHISPER_BUILD_DIR}} \
          -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF \
          -DWHISPER_BUILD_EXAMPLES=OFF -DWHISPER_BUILD_TESTS=OFF \
          -DGGML_METAL=OFF -DGGML_CUDA=ON -DGGML_CUDA_F16=ON \
          -DCMAKE_CUDA_ARCHITECTURES="{{.CUDA_ARCHS}}" \
          -DCMAKE_CUDA_HOST_COMPILER="$(command -v g++-12 || command -v g++)" \
          -DCMAKE_C_COMPILER="${CC}" -DCMAKE_CXX_COMPILER="${CXX}" \
          -DCMAKE_VERBOSE_MAKEFILE=ON
        cmake --build {{.WHISPER_BUILD_DIR}} --target ggml-cuda whisper -j "${JOBS}"
  # ------------------------------------------------------------------
  # Go Application Build
  # ------------------------------------------------------------------

  build:
    desc: Build all apps (server, mic, research)
    deps: [whisper-lib]
    cmds:
      - |
        set -e
        ROOT="$(pwd)"
        INCLUDE_FLAGS="-I${ROOT}/third_party/whisper.cpp/include -I${ROOT}/third_party/whisper.cpp/ggml/include"
        OS_NAME="$(uname -s)"
        if [ "$OS_NAME" = "Darwin" ]; then
          LIB_FLAGS="-L${ROOT}/third_party/whisper.cpp/build/src -L${ROOT}/third_party/whisper.cpp/build -L${ROOT}/third_party/whisper.cpp/build/ggml/src -L${ROOT}/third_party/whisper.cpp/build/ggml/src/ggml-blas -L${ROOT}/third_party/whisper.cpp/build/ggml/src/ggml-metal -lwhisper -lggml -lggml-blas -framework Accelerate -framework Foundation"
        else
          LIB_FLAGS="-L${ROOT}/third_party/whisper.cpp/build/src \
          -L${ROOT}/third_party/whisper.cpp/build \
          -L${ROOT}/third_party/whisper.cpp/build/ggml/src \
          -L${ROOT}/third_party/whisper.cpp/build/ggml/src/ggml-cpu \
          -Wl,--start-group -lwhisper -lggml -lggml-cpu -Wl,--end-group \
          -lstdc++ -lm -lpthread -ldl -fopenmp"
        fi
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go build -ldflags "-s -w" -o bin/server ./cmd/server
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go build -ldflags "-s -w" -o bin/mic ./cmd/mic
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go build -ldflags "-s -w" -o bin/research ./cmd/research
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go build -ldflags "-s -w" -o bin/choose ./cmd/choose

  build:metal:
    desc: Build all apps with Metal acceleration (macOS)
    deps: [whisper-lib:metal]
    cmds:
      - |
        set -e
        ROOT="$(pwd)"
        export GGML_METAL_PATH_RESOURCES="${ROOT}/third_party/whisper.cpp"
        INCLUDE_FLAGS="-I${ROOT}/third_party/whisper.cpp/include -I${ROOT}/third_party/whisper.cpp/ggml/include -DGGML_USE_METAL=1"
        LIB_FLAGS="-L${ROOT}/third_party/whisper.cpp/build/src -L${ROOT}/third_party/whisper.cpp/build -L${ROOT}/third_party/whisper.cpp/build/ggml/src -L${ROOT}/third_party/whisper.cpp/build/ggml/src/ggml-blas -L${ROOT}/third_party/whisper.cpp/build/ggml/src/ggml-metal -lwhisper -lggml -lggml-metal -lggml-blas -framework Accelerate -framework Metal -framework MetalKit -framework Foundation"
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go build -tags=metal -ldflags "-s -w" -o bin/server-metal ./cmd/server
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go build -tags=metal -ldflags "-s -w" -o bin/mic-metal ./cmd/mic
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go build -tags=metal -ldflags "-s -w" -o bin/research-metal ./cmd/research
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go build -tags=metal -ldflags "-s -w" -o bin/choose-metal ./cmd/choose

  build:cuda:deps:ubuntu:
    desc: Install Ubuntu dependencies for CUDA and FFmpeg (requires sudo)
    cmds:
      - |
        set -e
        sudo apt update
        sudo apt install -y build-essential cmake pkg-config \
          nvidia-cuda-toolkit \
          ffmpeg libavformat-dev libavcodec-dev libavdevice-dev libavfilter-dev \
          libswresample-dev libswscale-dev libavutil-dev
  build:cuda:
    desc: Build all apps with CUDA acceleration (Ubuntu)
    deps: [whisper-lib:cuda]
    cmds:
      - |
        set -e
        ROOT="$(pwd)"
        CUDA_HOME="${CUDA_HOME:-$(dirname $(dirname $(command -v nvcc)))}"
        INCLUDE_FLAGS="-I${ROOT}/third_party/whisper.cpp/include -I${ROOT}/third_party/whisper.cpp/ggml/include"
        LIB_FLAGS="-L${ROOT}/third_party/whisper.cpp/build/src \
        -L${ROOT}/third_party/whisper.cpp/build \
        -L${ROOT}/third_party/whisper.cpp/build/ggml/src \
        -L${ROOT}/third_party/whisper.cpp/build/ggml/src/ggml-cuda \
        -L${ROOT}/third_party/whisper.cpp/build/ggml/src/ggml-cpu \
        -L${CUDA_HOME}/lib64 \
        -Wl,--start-group -lwhisper -lggml -lggml-cuda -lggml-cpu -Wl,--end-group \
        -lstdc++ -lm -lpthread -ldl -fopenmp -lcuda -lcudart -lcublas -lcublasLt"
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go clean -cache
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go build -a -ldflags "-s -w" -o bin/server-cuda ./cmd/server
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go build -a -ldflags "-s -w" -o bin/mic-cuda ./cmd/mic
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go build -a -ldflags "-s -w" -o bin/research-cuda ./cmd/research
        CGO_CFLAGS="${INCLUDE_FLAGS}" CGO_LDFLAGS="${LIB_FLAGS}" go build -a -ldflags "-s -w" -o bin/choose-cuda ./cmd/choose

  run:cuda:
    desc: Run server with CUDA build
    deps: [build:cuda]
    cmds:
      - ./bin/server-cuda

  # ------------------------------------------------------------------
  # Running & Utility Tasks
  # ------------------------------------------------------------------

  run:
    desc: Run server
    deps: [build]
    cmds:
      - ./bin/server

  run:metal:
    desc: Run server with Metal build
    deps: [build:metal]
    cmds:
      - ./bin/server-metal
  setup:
    desc: Setup the project
    cmds:
      - |
        set -e
        cd "$(git rev-parse --show-toplevel)"
        mkdir -p bin
        if [ ! -x "{{.EASYP_BIN}}" ] && ! command -v easyp >/dev/null 2>&1; then
          echo "INFO: Installing EasyP into ./bin"
          curl -fsSL https://easyp.tech/install.sh | bash -s -- -b ./bin
        else
          echo "INFO: EasyP already installed"
        fi
      - go install github.com/ggerganov/whisper.cpp/bindings/go/examples/go-model-download@latest

  easyp:
    desc: Generate protobuf code with EasyP
    cmds:
      - |
        set -e
        cd "$(git rev-parse --show-toplevel)"
        if [ -x "{{.EASYP_BIN}}" ]; then
          EASYP="{{.EASYP_BIN}}"
        else
          EASYP="$(command -v easyp || true)"
        fi
        if [ -z "$EASYP" ]; then
          echo "ERROR: easyp not found. Run 'task setup' first." >&2
          exit 1
        fi
        "$EASYP" generate

  download-model:
    desc: Download model using go-model-download example CLI
    cmds:
      - mkdir -p models
      - go-model-download -out ./models {{if .MODELS}}{{.MODELS}}{{else}}{{.MODEL}}{{end}}
  archive:
    desc: Archive the project
    cmds:
      - git archive --output whisper.zip HEAD

  dl:
    desc: Alias for download-model
    cmds:
      - task: download-model

  clean:
    desc: Clean build artifacts and vendor directory
    cmds:
      - rm -rf bin vendor third_party github.com
